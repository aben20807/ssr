/*
Copyright (c) 2020 Huang Po-Hsuan

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef SSR_H
#define SSR_H

#include <boost/asio.hpp>
#include <boost/thread.hpp>
#include <iostream>
#include <vector>

using namespace boost::asio::ip;
constexpr uint32_t RETRY_CONNECT = 1000;

enum e_role : unsigned char { SENDER, RECEIVER };
namespace ssr {

template <typename T> class Communicator {
public:
  Communicator(std::string const &host_addr, const uint16_t port)
      : m_socket(m_context) {
    boost::asio::io_context::work worker(m_context);
  }
  ~Communicator() { close(); }
  void close() {
    m_context.stop();
    if (m_thread.joinable())
      m_thread.join();
    m_socket.close();
  }
  bool is_connected() const { return m_socket.is_open(); }
  virtual void send(const T *const input, const int size) {}
  virtual void receive(T *const buffer, const int size) {}

protected:
  boost::asio::io_context m_context;
  tcp::socket m_socket;
  std::thread m_thread;
  boost::system::error_code m_ec;
};

template <typename T> class Sender : public Communicator<T> {
public:
  Sender(std::string const &host_addr, const uint16_t port)
      : Communicator<T>(host_addr, port) {
    tcp::resolver resolver(this->m_context);
    tcp::resolver::iterator endpoint =
        resolver.resolve(tcp::resolver::query(host_addr, std::to_string(port)));
    for (int i = 0; i < RETRY_CONNECT; i++) {
      boost::asio::connect(this->m_socket, endpoint, this->m_ec);
      if (!this->m_ec)
        break;
      boost::this_thread::sleep_for(boost::chrono::milliseconds(10));
    }
    if (this->m_ec) {
      std::cerr << "[Sender] Connect failed due to timeout!\n";
    }
    this->m_thread = std::thread([this]() { this->m_context.run(); });
  }
  template <typename V, typename Allocator>
  void send(std::vector<V, Allocator> const &message) {
    this->m_socket.wait(tcp::socket::wait_write, this->m_ec);
    boost::asio::write(this->m_socket, boost::asio::buffer(message),
                       this->m_ec);
    if (this->m_ec) {
      std::cerr << "[Sender] Send Error: " << this->m_ec.message() << "\n";
    }
  }
  void send(const T *const input, const int size) override {
    std::vector<T> v(input, input + size);
    send(v);
  }
};

template <typename T> class Receiver : public Communicator<T> {
public:
  Receiver(std::string const &host_addr, const uint16_t port)
      : Communicator<T>(host_addr, port) {
    try {
      tcp::acceptor acceptor(this->m_context, tcp::endpoint(tcp::v4(), port));
      acceptor.accept(this->m_socket);
      this->m_thread = std::thread([this]() { this->m_context.run(); });
    } catch (std::exception &e) {
      std::cerr << "[Receiver] Exception: " << e.what() << "\n";
    }
  }
  void receive(T *const buffer, const int size) override {
    std::vector<T> target(size);
    this->m_socket.wait(tcp::socket::wait_read, this->m_ec);
    boost::asio::read(this->m_socket, m_streambuf.prepare(size * sizeof(T)),
                      this->m_ec);
    // Ref: https://stackoverflow.com/a/28931673
    m_streambuf.commit(size * sizeof(T));
    // Ref: https://stackoverflow.com/a/28661429
    memcpy(buffer, boost::asio::buffer_cast<const void *>(m_streambuf.data()),
           size * sizeof(T));
    if (this->m_ec) {
      std::cerr << "[Receiver] Receive Error: " << this->m_ec.message() << "\n";
    }
    m_streambuf.consume(size * sizeof(T));
  }

private:
  boost::asio::streambuf m_streambuf;
};
template <typename T>
Communicator<T> *init(e_role role, const std::string &address,
                      const uint16_t port) {
  if (role == SENDER) {
    return (Communicator<T> *)new Sender<T>(address, port);
  } else { // RECEIVER
    return (Communicator<T> *)new Receiver<T>(address, port);
  }
}
} // namespace ssr
#endif /* SSR_H */
